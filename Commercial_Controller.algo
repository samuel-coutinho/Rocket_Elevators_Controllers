DEFINE Baterry USING _numberColumns AND _numberElevatorsPerColumn AND _numberBasements AND _numberFloors
    status: Online
    columnlist: EMPTY LIST
    callButtonList: EMPTY LIST

    SEQUENCE createcallButtonList USING _numberBasements AND _numberFloors
        FOR iterator FROM -numberBasements TO _numberFloors
            IF iterator IS LESS THAN 0
                INIT newCallButton TO INSTANTIATE CallButon WITH Down AND iterator
                ADD newCallButton TO callButtonList                
            ENDIF
            IF iterator IS GREATER THAN 1
                INIT newCallButton TO INSTANTIATE CallButon WITH UP AND iterator
                ADD newCallButton TO callButtonList                
            ENDIF       
        ENDFOR
    ENDSEQUENCE

    SEQUENCE createcolumnlist USING _numberBasements AND _numberColumns AND _numberFloors
        INIT newColumn TO INSTANTIATE Column WITH 1 AND _numberBasements AND _numberElevatorsPerColumn AND -_numberBasements AND 1
        SET numberOfFloorsPerColumn TO _numberFloors FLOOR_DIVISION  (_numberColumns MINUS 1)
        FOR iterator FROM 2 TO _numberColumns
            SET firstServedFloor TO 1 PLUS [(iterator MINUS 2) TIMES numberOfFloorsPerColumn]
            SET lastServedFloor TO firstServedFloor PLUS (numberOfFloorsPerColumn MINUS 1)
            SET reminder TO _numberFloors MODULUS (_numberColumns MINUS 1)
            IF reminder IS NOT EQUAL 0  AND iterator IS EQUAL _numberColumns THEN
                SET lastServedFloor TO lastServedFloor PLUS reminder
                SET numberOfFloorsPerColumn TO numberOfFloorsPerColumn PLUS reminder
            ENDIF
            INIT newColumn TO INSTANTIATE Column WITH iterator AND numberOfFloorsPerColumn AND _numberElevatorsPerColumn AND firstServedFloor AND lastServedFloor
            ADD newColumn TO columnlist
        ENDFOR
    ENDSEQUENCE

    SEQUENCE requestElevator WITH _requestedFloor AND _direction
        CALL findBestColumn WITH _requestedFloor RETURNING column
        Call findBestElevator OF column RETURNING bestElevator
        ADD _requestedFloor TO destinationList OF bestElevator
        CALL moveElevatorToDestination OF elevator
        CALL openDoors WITH bestElevator   // not implemented
    ENDSEQUENCE

    SEQUENCE findBestColumn WITH _requestedFloor RETURNING column          
        FOR EACH column in columnlist
            IF _requestedFloor IS GREATER THAN firstServedFloor AND IS LESS THAN lastServedFloor THEN
                RETURN column
            ENDIF
        ENDFOR
    ENDSEQUENCE  

ENDDEFINE

DEFINE Column USING _id AND _numberFloors AND _numberOfElevators AND firstServedFloor AND _lastServedFloor
    ID: _id
    status: Online
    numberFloors: _numberFloors
    numberOfElevators: _numberOfElevators    
    firstServedFloor: _firstServedFloor
    lastServedFloor: _lastServedFloor
    ElevatorList: EMPTY LIST

    SEQUENCE createElevatorList USING _numberElevatorsPerColumn
        FOR iterator FROM 1 TO _numberElevatorsPerColumn
            INIT newElevator TO INSTANTIATE Elevator WITH iterator
            ADD newElevator TO ElevatorList
        ENDFOR
    ENDSEQUENCE

    SEQUENCE findBestElevator RETURNING bestElevator
        SET shortestDistance TO _numberFloors
        FOR EACH elevator in ElevatorList
            CALL calcDistanceToFloor OF elevator USING _requestedFloor RETURNING distance
            IF distance IS LESS OR EQUAL THAN shortestDistance
                SET shortestDistance TO distance
                SET bestElevator TO elevator
            ENDIF
        ENDFOR
        RETURN bestElevator
    ENDSEQUENCE 


ENDDEFINE

DEFINE Elevator USING _id
    ID: _id
    status: Online  
    directon: Nome
    currentFloor: 1
    doors: Closed   
    destinationList: EMPTY LIST
    
    SEQUENCE calcDistanceToFloor USING _requestedFloor RETURNING distance
        SET distance TO ABSOLUTE(_requestedFloor MINUS currentFloor)     
        RETURN distance
    ENDSEQUENCE

    SEQUENCE moveElevatorToDestination
        SET destination TO READ destinationList[1]        
        IF currentFloor IS GREATER THAN destination
            SET direction TO Down            
        ELSE 
            SET direction TO Up             
        WHILE currentFloor IS NOT EQUAL destination
            CALL moveElevator WITH direction
            Call readCurrentFloor RETURNING currentFloor
        ENDWHILE
        REMOVE destination FROM destinationList
        ROTATE destinationList LEFT 
    ENDSEQUENCE

ENDDEFINE

DEFINE callButton USING AND _direction AND _floor    
    direction: _direction
    floor: _floor
ENDDEFINE

